<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int MASCHI = 3;
const int FEMMINE = 3;
const int PROC = MASCHI + FEMMINE;
const int N = -1;
const int M = 0;
const int F = 1;

typedef int[0,PROC-1] pid;
typedef int[M,F] sex_id;

int accessi[2] = { 0, 0};
int wait[2] = { 0, 0};
int current_sex = N;

chan request[pid];
chan release[pid];
chan ok[pid];
broadcast chan check;

</declaration>
	<template>
		<name x="5" y="5">Processo</name>
		<parameter>const pid id,const sex_id sex</parameter>
		<declaration>// Place local declarations here.
clock x;</declaration>
		<location id="id0" x="-272" y="68">
		</location>
		<location id="id1" x="-102" y="-85">
			<name x="-112" y="-119">Inside</name>
			<label kind="invariant" x="-93" y="-76">x &lt;= 4</label>
		</location>
		<location id="id2" x="-280" y="-85">
			<name x="-290" y="-119">Request</name>
		</location>
		<location id="id3" x="-484" y="-85">
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-466" y="51">ok[id]?</label>
			<nail x="-484" y="68"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-93" y="-8">x &gt;= 2</label>
			<label kind="synchronisation" x="-102" y="8">release[id]!</label>
			<nail x="-102" y="68"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-238" y="-102">ok[id]?</label>
			<label kind="assignment" x="-238" y="-85">x=0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-442" y="-102">request[id]!</label>
		</transition>
	</template>
	<template>
		<name>Gestore</name>
		<parameter>const pid id, const sex_id sex</parameter>
		<declaration>bool possoEntrare(){
    sex_id altro_sesso = 1 - sex;
    if( accessi[sex] &lt; 2 &amp;&amp; current_sex != altro_sesso )
        return true;
    
    return false;
}

bool devoCambiare(){
    sex_id  altro_sesso = 1 -sex;
    if( accessi[sex] == 0 &amp;&amp; wait[sex] == 0 )
        return true;
    
    return false;
}</declaration>
		<location id="id4" x="-1207" y="186">
			<committed/>
		</location>
		<location id="id5" x="-943" y="-34">
			<committed/>
		</location>
		<location id="id6" x="-943" y="84">
			<committed/>
		</location>
		<location id="id7" x="-1207" y="84">
			<committed/>
		</location>
		<location id="id8" x="-969" y="-170">
			<committed/>
		</location>
		<location id="id9" x="-1207" y="-289">
		</location>
		<location id="id10" x="-1207" y="-170">
			<committed/>
		</location>
		<location id="id11" x="-1207" y="-34">
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id5"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-1113" y="-51">check!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-943" y="8">ok[id]!</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-1173" y="68">!devoCambiare()</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="guard" x="-1156" y="187">wait[1-sex]&gt;0</label>
			<label kind="assignment" x="-1164" y="204">current_sex=1-sex</label>
			<nail x="-943" y="186"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="guard" x="-1190" y="119">wait[1-sex]==0</label>
			<label kind="assignment" x="-1189" y="135">current_sex = N</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="guard" x="-1326" y="119">devoCambiare()</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-1207" y="8">release[id]?</label>
			<label kind="assignment" x="-1207" y="25">accessi[sex]--</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-1189" y="-293">check?</label>
			<label kind="assignment" x="-1139" y="-247">wait[sex]--</label>
			<nail x="-1139" y="-264"/>
			<nail x="-1139" y="-204"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-1292" y="-111">request[id]?</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-1088" y="-94">ok[id]!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="-1317" y="-230">!possoEntrare()</label>
			<label kind="assignment" x="-1317" y="-213">wait[sex]++</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="-1139" y="-196">possoEntrare()</label>
			<label kind="assignment" x="-1156" y="-170">accessi[sex]++,
current_sex=sex</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
m1 = Processo(0,M);
m2 = Processo(1,M);
m3 = Processo(2,M);
f1 = Processo(3,F);
f2 = Processo(4,F);
f3 = Processo(5,F);
g1 = Gestore(0,M);
g2 = Gestore(1,M);
g3 = Gestore(2,M);
g4 = Gestore(3,F);
g5 = Gestore(4,F);
g6 = Gestore(5,F);
// List one or more processes to be composed into a system.
system g1,g2,g3,g4,g5,g6,m1,m2,m3,f1,f2,f3;
    </system>
	<queries>
		<query>
			<formula>E&lt;&gt; accessi[0]&gt;2 || accessi[1]&gt;2
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; accessi[0]&gt;0 &amp;&amp; accessi[1]&gt;0
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt;deadlock
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
