<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>//Insert declarations of global clocks, variables, constants and channels.
broadcast chan end_fire;

typedef struct{
  int index;
  int weight;
} Info;

const int T = 8;
const int P = 9;
const int PRE = 2;
const int POST = 2;
const int p0 = 0;
const int p1 = 1;
const int p2 = 2;
const int p3 = 3;
const int p4 = 4;
const int p5 = 5;
const int p6 = 6;
const int p7 = 7;
const int p8 = 8;

const Info B[T][PRE] = {
{{6,1},{-1,0}},
{{0,1},{2,1}},
{{1,1},{-1,0}},
{{7,1},{-1,0}},
{{2,1},{3,1}},
{{4,1},{-1,0}},
{{8,1},{-1,0}},
{{5,1},{-1,0}}
};

const Info F[T][POST]= {
{{0,1},{6,1}},
{{1,1},{-1,0}},
{{2,1},{-1,0}},
{{3,1},{7,1}},
{{4,1},{-1,0}},
{{2,1},{-1,0}},
{{5,1},{8,1}},
{{-1,0},{-1,0}}
};

const int I[T][2] = {
{5,5},
{0,0},
{1,2},
{15,15},
{0,0},
{2,2},
{10,10},
{2,3}
};

int[0,1] M[P]={ 1,0,1,1,0,1,1,1,1 };

const int INF = -1;
typedef int[0,T-1] tid;

bool enabled( const tid ID ){
  int p;
  for(p=0;p&lt;PRE &amp;&amp; B[ID][p].index!=-1 ;++p)
    if (B[ID][p].weight&gt;0 &amp;&amp; M[B[ID][p].index]&lt;B[ID][p].weight ||
        B[ID][p].weight==0 &amp;&amp; M[B[ID][p].index]&gt;0)
      return false;
  return true;
}//enabled

void withdraw( const tid ID ){
  int p;
  for(p=0;p&lt;PRE &amp;&amp; B[ID][p].index!=-1;++p){
    M[B[ID][p].index]-=B[ID][p].weight;
  }
}//withdraw

void deposit( const tid ID ){
  int p;
  for(p=0;p&lt;POST &amp;&amp; F[ID][p].index!=-1;++p){
    M[F[ID][p].index]+=F[ID][p].weight;
  }
}//deposit

/*
    Dichiarazione pTPN
*/
const int CPU = 1;
const int TASK = 3;
const int TT = 2;
typedef int[0,TASK-1] task_t;
typedef int[0,CPU-1] cpu_t;

typedef struct{ 
    int[0,T] index;
    int prior;
}P_Info;

typedef struct{
    int[0,T] index;
    int ready;
}R_Info;

//fps
const P_Info fixed_priority[CPU][TASK][TT]={
    {
        {{1,3},{2,3}},
        {{4,1},{5,1}},
        {{7,2},{T,0}}
    }
};


R_Info request[CPU][TASK][TT]={
    {
        {{1,0},{2,0}},
        {{4,0},{5,0}},
        {{7,0},{T,0}}
    }
};
//dichiarazione canali
chan dispatch[T];
broadcast chan preempt[CPU];
//dichiarazione clock
clock time[TASK];
clock x[TASK];
//naming variabili
const cpu_t cpu0 = 0;
const task_t task0 = 0;
const task_t task1 = 1;
const task_t task2 = 2;
 </declaration>
	<template>
		<name>Starter</name>
		<location id="id0" x="-56" y="-8">
		</location>
		<location id="id1" x="-184" y="-8">
			<name x="-232" y="-24">Start</name>
			<committed/>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-152" y="-32">end_fire!</label>
		</transition>
	</template>
	<template>
		<name>Fps</name>
		<parameter>const cpu_t cpu</parameter>
		<declaration>
bool requests(){
   int i,j;
   for( i=0; i&lt;TASK; i++ )
      for( j=0; j&lt;TT; j++ )
          if( request[cpu][i][j].index!=T &amp;&amp; request[cpu][i][j].ready&gt;0 ) return true;
   return false;
}//requests

int[0,T] next(){
   int[0,TASK] i;
   int[0,TT] j, hpid;
   int[-1,TASK] hpt=-1;
   for( i=0; i&lt;TASK; i++ )
      for( j=0; j&lt;TT; j++ )
         if( request[cpu][i][j].index&lt;T &amp;&amp; request[cpu][i][j].ready&gt;0 ){
             if( hpt==-1 || fixed_priority[cpu][i][j].prior&gt;fixed_priority[cpu][hpt][hpid].prior ){
                 hpt=i; hpid=j;
             }
         }
   return fixed_priority[cpu][hpt][hpid].index;
}//next</declaration>
		<location id="id2" x="-2016" y="-352">
			<committed/>
		</location>
		<location id="id3" x="-1864" y="-416">
			<name x="-1848" y="-424">Selection</name>
			<urgent/>
		</location>
		<location id="id4" x="-2016" y="-416">
			<name x="-2064" y="-424">FPS</name>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-1976" y="-504">!requests()</label>
			<nail x="-1864" y="-480"/>
			<nail x="-2016" y="-480"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-2008" y="-392">preempt[cpu]!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-1968" y="-352">requests()</label>
			<label kind="synchronisation" x="-1984" y="-336">dispatch[next()]!</label>
			<nail x="-1864" y="-352"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-1968" y="-440">end_fire?</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Transition</name>
		<parameter>const tid ID, const task_t taskId, const cpu_t cpu</parameter>
		<declaration>//Insert local declarations of clocks, variables and constants.</declaration>
		<location id="id5" x="-51" y="110">
			<committed/>
		</location>
		<location id="id6" x="76" y="110">
			<name x="92" y="102">W</name>
			<committed/>
		</location>
		<location id="id7" x="-51" y="-8">
			<name x="-42" y="-8">F</name>
			<label kind="invariant" x="-93" y="-68">I[ID][1]==INF ||
time[taskId]&lt;=I[ID][1]</label>
		</location>
		<location id="id8" x="-187" y="110">
			<name x="-211" y="102">D</name>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="guard" x="-42" y="25">enabled(ID)</label>
			<label kind="synchronisation" x="-42" y="42">end_fire!</label>
			<label kind="assignment" x="-42" y="59">time[taskId]=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id8"/>
			<label kind="guard" x="-153" y="93">!enabled(ID)</label>
			<label kind="synchronisation" x="-144" y="110">end_fire!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-8" y="93">end_fire!</label>
			<label kind="assignment" x="-17" y="110">deposit(ID)</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-187" y="-25">!enabled(ID)</label>
			<label kind="synchronisation" x="-178" y="-8">end_fire?</label>
			<nail x="-187" y="-8"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-34" y="-25">time[taskId]&gt;=I[ID][0]</label>
			<label kind="assignment" x="-8" y="-8">withdraw(ID)</label>
			<nail x="-34" y="-8"/>
			<nail x="76" y="-8"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-153" y="25">enabled(ID)</label>
			<label kind="synchronisation" x="-161" y="42">end_fire?</label>
			<label kind="assignment" x="-170" y="59">time[taskId]=0</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">pTransition</name>
		<parameter>const tid ID, task_t taskId, const cpu_t cpu</parameter>
		<declaration>//Insert local declarations of clocks, variables and constants.

bool this; //this task instance

void arrival(){
   int[0,TT] j;
   for( j=0; j&lt;TT; j++ )
       if( request[cpu][taskId][j].index==ID ){
             request[cpu][taskId][j].ready++; return;
       }
}//arrival

void finish(){
   int[0,TT] j;
   for( j=0; j&lt;TT; j++ )
       if( request[cpu][taskId][j].index==ID ){
             request[cpu][taskId][j].ready--; return;
       }
}//finish
 
 </declaration>
		<location id="id9" x="561" y="238">
			<committed/>
		</location>
		<location id="id10" x="561" y="8">
			<name x="551" y="-22">C2</name>
			<committed/>
		</location>
		<location id="id11" x="705" y="68">
			<name x="713" y="44">FC</name>
			<urgent/>
		</location>
		<location id="id12" x="289" y="68">
			<name x="257" y="60">NP</name>
			<label kind="invariant" x="297" y="43">x[taskId]'==0</label>
		</location>
		<location id="id13" x="416" y="68">
			<name x="382" y="51">C1</name>
			<urgent/>
		</location>
		<location id="id14" x="705" y="238">
			<name x="721" y="238">W</name>
			<committed/>
		</location>
		<location id="id15" x="561" y="68">
			<name x="545" y="44">F</name>
			<label kind="invariant" x="569" y="68">x[taskId]&lt;=I[ID][1]</label>
		</location>
		<location id="id16" x="416" y="238">
			<name x="400" y="246">D</name>
		</location>
		<init ref="id16"/>
		<transition>
			<source ref="id9"/>
			<target ref="id13"/>
			<label kind="guard" x="382" y="144">enabled(ID)</label>
			<label kind="synchronisation" x="391" y="161">end_fire!</label>
			<label kind="assignment" x="391" y="178">arrival(),
x[taskId]=0</label>
			<nail x="561" y="204"/>
			<nail x="416" y="204"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id16"/>
			<label kind="guard" x="459" y="221">!enabled(ID)</label>
			<label kind="synchronisation" x="467" y="238">end_fire!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id13"/>
			<label kind="guard" x="442" y="-8">x[taskId]&lt;I[ID][1]</label>
			<nail x="450" y="8"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="586" y="-8">x[taskId]==I[ID][1]</label>
			<label kind="assignment" x="646" y="8">finish()</label>
			<nail x="688" y="8"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="323" y="-8">enabled(ID)</label>
			<label kind="synchronisation" x="323" y="8">end_fire?</label>
			<nail x="314" y="8"/>
			<nail x="399" y="8"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id16"/>
			<label kind="guard" x="433" y="102">!enabled(ID)</label>
			<label kind="synchronisation" x="433" y="85">end_fire?</label>
			<label kind="assignment" x="433" y="119">finish()</label>
			<nail x="467" y="110"/>
			<nail x="467" y="204"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id16"/>
			<label kind="guard" x="595" y="272">!enabled(ID)</label>
			<label kind="synchronisation" x="595" y="289">end_fire?</label>
			<nail x="748" y="76"/>
			<nail x="748" y="289"/>
			<nail x="416" y="289"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="664" y="152">enabled(ID)</label>
			<label kind="assignment" x="663" y="170">withdraw(ID)</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id10"/>
			<label kind="guard" x="569" y="25">enabled(ID)</label>
			<label kind="synchronisation" x="569" y="42">end_fire?</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id13"/>
			<label kind="guard" x="306" y="102">enabled(ID)</label>
			<label kind="synchronisation" x="314" y="119">end_fire?</label>
			<label kind="assignment" x="314" y="136">arrival(),
x[taskId]=0</label>
			<nail x="365" y="204"/>
			<nail x="365" y="110"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id16"/>
			<label kind="guard" x="288" y="240">!enabled(ID)</label>
			<label kind="synchronisation" x="288" y="256">end_fire?</label>
			<label kind="assignment" x="288" y="272">finish()</label>
			<nail x="288" y="128"/>
			<nail x="289" y="238"/>
			<nail x="374" y="238"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="450" y="68">dispatch[ID]?</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="306" y="68">preempt[cpu]?</label>
			<nail x="382" y="68"/>
			<nail x="306" y="68"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="603" y="221">end_fire!</label>
			<label kind="assignment" x="603" y="238">deposit(ID)</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="484" y="136">!enabled(ID)</label>
			<label kind="synchronisation" x="493" y="153">end_fire?</label>
			<label kind="assignment" x="493" y="170">finish()</label>
			<nail x="512" y="200"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="568" y="128">x[taskId]&gt;=I[ID][0]</label>
			<label kind="assignment" x="569" y="144">withdraw(ID),
finish()</label>
			<nail x="616" y="200"/>
		</transition>
	</template>
	<system>//Edit system definition.
t0 = Transition(0,task0,cpu0);
t1 = pTransition(1,task0,cpu0);
t2 = pTransition(2,task0,cpu0);
t3 = Transition(3,task1,cpu0);
t4 = pTransition(4,task1,cpu0);
t5 = pTransition(5,task1,cpu0);
t6 = Transition(6,task2,cpu0);
t7 = pTransition(7,task2,cpu0);
fps = Fps(cpu0);
system Starter,t0,t1,t2,t3,t4,t5,t6,t7,fps;

</system>
	<queries>
		<query>
			<formula>A[] t2.W imply time[task0]&lt;=5
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] t5.W imply time[task1]&lt;=15
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] t7.W imply time[task2]&lt;=10
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] M[0]&lt;=1 &amp;&amp; M[3]&lt;=1 &amp;&amp; M[5]&lt;=1
			</formula>
			<comment>Il sistema è schedulabile, controllo che nei posti corrisponedenti a p0 p3 p5 sia sempre presente al più un token, in caso contrario vorrebbe dire che qualche processo abbia mancato la sua deadline.
Nel caso in cui non si usi il PCP il sistema risulta non essere più schedulabile, infatti a mancare la deadline sarà proprio il processo P0 il più prioritario che dovra attendere nella peggiore delle ipotesi:
Il proprio C + la sezione Critica di P1 +l'intera durata di esecuzione di P2 che essendo più prioritario preempta P1 (sebbene questo sia in sezione critica)....facendo i conti risulta:
2+2+3 = 7 &gt; 5 quindi il sistema non sarà schedulabile.
Viceversa adottando il PCP tutte le deadline saranno rispettate
			</comment>
		</query>
		<query>
			<formula>A[] !deadlock
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
